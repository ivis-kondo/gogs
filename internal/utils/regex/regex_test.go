package regex_test

import (
	"testing"

	"github.com/NII-DG/gogs/internal/utils/regex"
	"github.com/stretchr/testify/assert"
)

func TestCheckORCIDFormat(t *testing.T) {

	tests := []struct {
		test_name     string
		values        []string
		predict_value bool
	}{
		{
			test_name: "invlid format value",
			values: []string{
				"",
				"813-2516-6320-7402",
				"8713-216-6320-7402",
				"8713-216-6320-7402",
				"8713-2516-6320-740",
				"198-4394-5394-372X",
				"1998-394-5394-372X",
				"1998-4394-394-372X",
				"1998-4394-5394-72X",
			},
			predict_value: false,
		},
		{
			test_name: "OK value",
			values: []string{
				"8713-2516-6320-7402", "8057-4313-7064-113X", "6971-3343-9414-359X", "5518-2009-1608-928X", "0909-1459-5187-1690", "3061-2970-0279-7283", "8751-3116-0270-1861", "1998-4394-5394-372X", "9749-4019-7800-7307", "2441-7957-3135-683X", "5197-7501-1243-8421", "3141-4239-9032-1209", "1389-2305-3011-003X", "9795-3303-9551-4166", "2435-8301-7113-422X", "2291-7287-7010-980X", "6813-5594-0375-675X", "4950-2428-8005-171X", "2574-3519-6064-2886", "1907-9699-5118-329X", "4917-2459-2233-648X", "6038-0416-7178-3946", "9531-5741-6607-4142", "4439-1497-6386-471X", "3699-8426-1426-830X", "2556-3955-7083-6898", "7050-9281-5639-704X", "4575-2187-2848-2270", "6021-7010-7187-5840", "5530-2609-1889-4716", "8367-1353-6099-5535", "1181-5238-2064-204X", "7462-9442-8766-0108", "7613-2042-2470-5524", "0951-9633-1759-841X", "5202-0405-5523-3110", "4172-9526-5936-032X", "8227-8108-9315-2151", "9327-7360-1079-127X", "0434-9415-8470-1070",
				"8228-0221-9208-1679", "0021-5563-9652-8536", "7668-3467-6686-9768", "7268-0437-9273-244X", "1793-5278-6964-5969", "4644-0194-4199-936X", "6541-3012-9195-230X", "6357-2904-6769-1502", "9075-5630-6031-6751", "4191-5712-9500-1691", "2338-7610-2794-0056", "2208-9243-2988-3253", "9695-1220-3322-4004", "2977-9651-5305-513X", "1421-7923-1145-9744", "3080-2136-5064-6801", "3128-7611-7647-528X", "0576-0373-1262-444X", "4679-0327-1853-276X", "7787-6464-0860-0637", "4328-5441-0703-2822", "5679-8383-6426-2144", "5013-4817-0495-589X", "4452-9297-7333-397X", "7639-0449-6669-723X", "7213-1380-7005-484X", "9953-1354-1753-877X", "1687-1201-7949-3454", "6906-6035-3279-5728", "1536-0456-6268-5058", "2595-8944-3436-2692", "6917-8480-0475-138X", "2803-5228-7963-4736", "0336-6741-0413-207X", "1897-4914-8671-6175", "6069-9422-2353-5474", "1981-8722-3358-7700", "1222-5509-0942-585X", "8203-2750-5367-216X", "2726-2762-1927-864X", "2814-0276-4398-671X", "4233-6585-9703-656X", "1493-1340-0789-1337", "5280-5644-7310-061X", "4920-8421-2107-6431", "8748-6114-6182-824X", "5894-4001-2274-259X", "6748-1414-9310-665X", "6540-8534-0202-7432", "5716-1698-4931-0153", "0454-1788-1328-5189", "4867-1956-7813-6333", "7353-2793-5034-4257", "9680-6105-6844-962X", "4363-0393-7893-706X", "6409-0881-4945-9156", "2346-0339-9541-746X", "6605-1397-6202-505X", "5996-1123-8809-5942", "5538-9098-0178-0840",
			},
			predict_value: true,
		},
		{
			test_name: "NG value",
			values: []string{
				"6141-4511-1840-5608", "3079-7706-1954-219X", "5607-0131-6126-6898", "8863-6756-0412-341X", "1983-5302-9629-9400", "0454-1408-8090-2715", "2639-6275-0813-878X", "0136-6005-3011-3072", "6383-8162-6515-271X", "1684-0904-6969-5517", "4746-7840-6981-4631", "5185-6454-0474-5696", "3955-9120-0975-844X", "4067-1970-5460-9969", "1734-6412-9602-5858", "8143-5486-8051-2482", "5535-3452-9329-059X", "8434-7945-7677-2416", "6683-8120-4221-842X", "4880-6797-4208-006X", "4460-6083-4603-4770", "4153-3386-4350-6512", "3865-5676-4101-7746", "6311-6196-8931-7701", "0145-4328-6510-8088", "3743-1436-0178-580X", "0662-4605-2108-6107", "8831-3645-9477-3421", "8121-5786-0869-6841", "2503-2988-6964-6691", "2760-8622-6291-971X", "7357-2496-6776-831X", "2390-5115-7459-112X", "1639-9781-2707-909X", "5556-7137-9525-8823", "2326-9482-8713-7855", "8990-7303-8326-5573", "3297-6570-9693-637X", "8823-6811-4582-489X", "6250-6007-4468-315X",
				"9247-5100-1410-652X", "6598-2910-8036-583X", "6181-2694-8850-5296", "9598-5097-6138-4170", "3114-7752-8123-9808", "6032-1380-7555-982X", "5978-8860-2227-647X", "2955-4328-7034-5206", "2005-7055-8340-4014", "4585-4099-0932-654X", "6385-4439-3685-541X", "3150-7937-1926-426X", "1651-6163-6207-970X", "9241-2466-1116-5106", "5195-4905-0597-929X", "8310-1523-1519-0342", "6151-1832-8383-666X", "9860-2912-6358-5472", "9553-8441-3566-9395", "9852-2604-5747-7155", "9130-0171-8174-089X", "3979-3210-0130-9132", "7453-3544-9416-036X", "9813-2828-1068-197X", "7250-4213-8982-7802", "0197-9552-9885-994X", "1297-2174-2508-655X", "4908-1104-9350-167X", "2758-6436-6837-576X", "0816-1007-7029-578X", "6460-6951-7633-8279", "0081-8739-3707-267X", "5699-8685-0764-1260", "3505-3652-2204-843X", "3250-2323-0438-2451", "6691-6598-4501-3400", "3209-3011-5775-4016", "6259-0315-8971-464X", "3658-6966-6799-0720", "8992-6030-5183-259X", "7517-8695-7870-8846", "0385-3720-1848-645X", "1953-5192-2132-2862", "5183-6384-1325-2837", "0061-4406-9871-5170", "5056-2842-9277-9474", "0452-4859-1448-6472", "5686-4547-1426-0439", "6226-9851-7510-8314", "7631-7411-5055-922X", "0475-5644-1664-0054", "5360-3737-4905-590X", "1574-0424-3222-807X", "0905-9313-8934-8727", "1319-9260-0555-934X", "4532-0328-0302-515X", "2089-3500-3460-291X", "3914-7750-8344-4021", "2907-8234-8192-6758", "0360-7751-9536-2875",
			},
			predict_value: false,
		},
	}

	for _, test := range tests {
		t.Run(test.test_name, func(t *testing.T) {
			for _, v := range test.values {
				assert.Equal(t, test.predict_value, regex.CheckORCIDFormat(v))
			}
		})
	}

}

func TestCheckTelephoneFormat(t *testing.T) {

	tests := []struct {
		test_name     string
		tels          []string
		predict_value bool
	}{
		{
			test_name: "invlid format value",
			tels: []string{
				"",
				"11-1234-1234",
				"112-123-1234",
				"1123-12-1234",
				"11234-1-1234",
				"150-1234-1234",
				"170-1234-1234",
				"180-1234-1234",
				"190-1234-1234",
				"01-12345-1234",
				"012-12-1234",
				"012-1234-1234",
				"0123-1-1234",
				"01234-12-1234",
				"010-1234-1234",
			},
			predict_value: false,
		},
		{
			test_name: "OK value",
			tels: []string{
				"01-1234-1234",
				"012-123-1234",
				"0123-12-1234",
				"01234-1-1234",
				"050-1234-1234",
				"070-1234-1234",
				"080-1234-1234",
				"090-1234-1234",
			},
			predict_value: true,
		},
	}

	for _, test := range tests {
		t.Run(test.test_name, func(t *testing.T) {
			for _, tel := range test.tels {
				assert.Equal(t, test.predict_value, regex.CheckTelephoneFormat(tel))
			}
		})
	}

}

func TestCheckERadRearcherNumberFormat(t *testing.T) {

	tests := []struct {
		test_name     string
		numbers       []string
		predict_value bool
	}{
		{
			test_name: "OK value",
			numbers: []string{
				"00000092", "00000068", "00000042", "00000076", "00000084", "00000042", "00000050", "00000018", "00000026", "00000018",
				"00000125", "00000274", "00000703", "00000331", "00000175", "00000795", "00000860", "00000589", "00000604", "00000597",
				"00003640", "00005373", "00002238", "00004341", "00002832", "00003830", "00005125", "00004234", "00009854", "00006040",
				"00076796", "00035560", "00071621", "00074790", "00013805", "00054726", "00078479", "00031021", "00029878", "00096380",
				"00223686", "00353300", "00310235", "00437914", "00847725", "00363218", "00524638", "00208167", "00574914", "00533556",
				"05395761", "03624625", "09944598", "01143304", "05734745", "04707636", "06216768", "07402902", "03127497", "01867623",
				"26741593", "47244845", "45470781", "80983874", "78360528", "56802992", "22554031", "72254628", "10494519", "90086992",
			},
			predict_value: true,
		},
		{
			test_name: "invlid format value",
			numbers: []string{
				"00000087", "00000073", "00000089", "00000009", "00000074", "00000071", "00000100", "00000038", "00000063", "00000029",
				"00000160", "00000587", "00000926", "00000617", "00000834", "00000895", "00000168", "00000910", "00000939", "00000199",
				"00004885", "00006376", "00008946", "00006352", "00007248", "00009802", "00009743", "00002601", "00003685", "00003866",
				"00078138", "00099387", "00054774", "00051146", "00047320", "00067455", "00026454", "00012781", "00038198", "00065355",
				"00104982", "00115186", "00944435", "00913361", "00311331", "00553066", "00695703", "00758648", "00758438", "00885232",
				"07720644", "02223136", "01150942", "01942628", "04132072", "02399190", "05808500", "01415778", "05684158", "08752630",
				"52268929", "74574848", "14863449", "43281739", "34210569", "22455123", "11361040", "93689318", "91926465", "90162885",
				"1", "12", "123", "1234", "12345", "123456", "1234567", "123456789",
			},
			predict_value: false,
		},
	}

	for _, test := range tests {
		t.Run(test.test_name, func(t *testing.T) {
			for _, num := range test.numbers {
				assert.Equal(t, test.predict_value, regex.CheckERadRearcherNumberFormat(num))
			}
		})
	}

}

func TestCheckNumeric(t *testing.T) {

	tests := []struct {
		test_name     string
		values        []string
		predict_value bool
	}{
		{
			test_name: "OK value",
			values: []string{
				"1",
				"10",
				"999999999999999999999999999999999999999999999999",
			},
			predict_value: true,
		},
		{
			test_name: "invlid format value",
			values: []string{
				"",
				"a",
				"qwertyuiopasdfghjklzxcvbnm",
				"^",
				"iufoaijjfd11234",
			},
			predict_value: false,
		},
	}

	for _, test := range tests {
		t.Run(test.test_name, func(t *testing.T) {
			for _, v := range test.values {
				assert.Equal(t, test.predict_value, regex.CheckNumeric(v))
			}
		})
	}

}

func TestCheckAlphabet(t *testing.T) {

	tests := []struct {
		test_name     string
		values        []string
		predict_value bool
	}{
		{
			test_name: "OK value",
			values: []string{
				"aphabet",
				"APHABET",
				"APHAbet",
			},
			predict_value: true,
		},
		{
			test_name: "invlid format value",
			values: []string{
				"日本語",
				"日本go",
			},
			predict_value: false,
		},
	}

	for _, test := range tests {
		t.Run(test.test_name, func(t *testing.T) {
			for _, v := range test.values {
				t.Logf("predict : %v, result : %v, value :%s", test.predict_value, regex.CheckAlphabet(v), v)
				assert.Equal(t, test.predict_value, regex.CheckAlphabet(v))
			}
		})
	}

}
